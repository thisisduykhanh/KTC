// src/main.ts
import * as readline from "readline";
import { CourseManager } from "./services/CourseManager";

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
});

const manager = new CourseManager();

function prompt(question: string): Promise<string> {
    return new Promise((resolve) => rl.question(question, resolve));
}

async function mainMenu(): Promise<void> {
    while (true) {
        console.log(`
MENU QU·∫¢N L√ù KH√ìA H·ªåC
1. Th√™m kh√≥a h·ªçc m·ªõi
2. Hi·ªÉn th·ªã danh s√°ch kh√≥a h·ªçc
3. C·∫≠p nh·∫≠t kh√≥a h·ªçc
4. X√≥a kh√≥a h·ªçc
5. Tho√°t
`);

        const choice = await prompt("Ch·ªçn ch·ª©c nƒÉng: ");

        switch (choice.trim()) {
            case "1":
                const name = await prompt("T√™n kh√≥a h·ªçc: ");
                const instructor = await prompt("Gi·∫£ng vi√™n: ");
                const durationStr = await prompt("Th·ªùi l∆∞·ª£ng (gi·ªù): ");
                manager.addCourse(name, instructor, Number(durationStr));
                break;

            case "2":
                manager.listCourses();
                break;

            case "3":
                const updateId = Number(await prompt("Nh·∫≠p ID kh√≥a h·ªçc c·∫ßn c·∫≠p nh·∫≠t: "));
                const newName = await prompt("T√™n m·ªõi (b·ªè qua n·∫øu kh√¥ng ƒë·ªïi): ");
                const newInstructor = await prompt("Gi·∫£ng vi√™n m·ªõi (b·ªè qua n·∫øu kh√¥ng ƒë·ªïi): ");
                const newDurationStr = await prompt("Th·ªùi l∆∞·ª£ng m·ªõi (b·ªè qua n·∫øu kh√¥ng ƒë·ªïi): ");
                const updateData = {
                    ...(newName && { name: newName }),
                    ...(newInstructor && { instructor: newInstructor }),
                    ...(newDurationStr && { duration: Number(newDurationStr) }),
                };
                manager.updateCourse(updateId, updateData);
                break;

            case "4":
                const deleteId = Number(await prompt("Nh·∫≠p ID kh√≥a h·ªçc c·∫ßn x√≥a: "));
                manager.deleteCourse(deleteId);
                break;

            case "5":
                console.log("üëã T·∫°m bi·ªát!");
                rl.close();
                process.exit(0);

            default:
                console.log("‚ùó L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.");
        }
    }
}

mainMenu();
